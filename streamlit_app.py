import streamlit as st
import geopandas as gpd
import folium
from streamlit_folium import folium_static
import streamlit.components.v1 as components
from branca.colormap import LinearColormap
import pickle

st.set_page_config(layout="wide")

with open('/Users/aswinanilkumar/Desktop/Streamlit/village_agg_per_district_modified.pkl', 'rb') as f:
    district_gdfs = pickle.load(f) 

# Streamlit app
st.sidebar.title('Vulnerability Mapping for Uttar Pradesh')

# Sidebar - District selection
districts = sorted(district_gdfs.keys())
selected_district = st.sidebar.selectbox('Select a district', districts)

# Filter GeoDataFrame based on selected district
district_gdf = district_gdfs[selected_district]

# Sidebar - Layer selection
layer_type = st.sidebar.radio('Select Layer', ['Villages', 'Subdistricts'])

# Checkbox for normalizing risk score
normalize_risk = st.sidebar.checkbox('Normalize risk score by population?', value=True)

if layer_type == 'Villages':
    filtered_gdf = district_gdf
    groupby_column = 'name'
else:
    # Group by subdistrict and dissolve
    filtered_gdf = district_gdf.dissolve(by='subdistrict', aggfunc={
        'tot_p': 'sum',
        'no_hh': 'sum',
        'avghhsz_cy': 'sum',
        'weighted_proba_case_count': 'sum',
        'normalized_risk_score':'sum',
        'district': 'first'
    }).reset_index()
    groupby_column = 'subdistrict'

# Get the centroids of the selected area
centroids = filtered_gdf.geometry.centroid

# Calculate the mean point to set map center
center_point = centroids.unary_union.centroid

# Determine which score to use based on checkbox selection
if normalize_risk:
    score_column = 'normalized_risk_score'
else:
    score_column = 'weighted_proba_case_count'

# Create a color map based on the selected risk scores
min_score = filtered_gdf[score_column].min()
max_score = filtered_gdf[score_column].max()

colormap = LinearColormap(
    colors=['#00a000',  # Dark green
            '#40c040',  # Light green
            '#ffd700',  # Gold
            '#ffff00',  # Yellow
            '#ffa500',  # Orange
            '#ff4500',  # Orange-Red
            '#ff0000'],  # Red
    vmin=min_score,
    vmax=max_score,
    index=[min_score,
           min_score + (max_score - min_score) * 0.1,  # Start of light green
           min_score + (max_score - min_score) * 0.2,  # Start of gold
           min_score + (max_score - min_score) * 0.5,  # Middle (yellow)
           min_score + (max_score - min_score) * 0.7,  # Start of orange
           min_score + (max_score - min_score) * 0.85,  # Start of orange-red
           max_score])

# Create map
m = folium.Map(location=[center_point.y, center_point.x], zoom_start=10)

# Add GeoDataFrame to the map with GeoJson
folium.GeoJson(
    filtered_gdf,
    name=layer_type,
    style_function=lambda feature: {
        'fillColor': colormap(feature['properties'][score_column]),
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.7,
    },
    tooltip=folium.GeoJsonTooltip(
        fields=[groupby_column, 'district', 'tot_p', 'no_hh', 'avghhsz_cy', score_column],
        aliases=[f'{layer_type[:-1]}:', 'District:', 'Population:', 'Households:', 'Avg. Household Size:', 'Risk Score:'],
        localize=True,
        style=('background-color: white; color: #333333; font-family: arial; font-size: 12px; padding: 10px;')
    ),
).add_to(m)

# Add color legend
colormap.add_to(m)

# Save the map to HTML string
map_html = m._repr_html_()

# Display the map using custom HTML
st.components.v1.html(f"""
    <div style="width: 100%; height: 100vh;">
        <h3>Map of {selected_district} - {layer_type} colored by Risk Score</h3>
        {map_html}
    </div>
""", height=700)

# Display statistics below the map
st.subheader(f'Statistics for {selected_district}')
st.write(f"Number of {layer_type.lower()}: {len(filtered_gdf)}")
st.write(f"Total population: {filtered_gdf['tot_p'].sum():.0f}")

# Display additional statistics only for Village view
if layer_type == 'Villages':
    st.write(f"Average household size: {filtered_gdf['avghhsz_cy'].mean():.2f}")
    st.write(f"Average risk score: {filtered_gdf[score_column].mean():.2f}")
    st.write(f"Min risk score: {min_score:.2f}")
    st.write(f"Max risk score: {max_score:.2f}")

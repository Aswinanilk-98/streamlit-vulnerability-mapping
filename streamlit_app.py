import streamlit as st
import geopandas as gpd
import folium
from branca.colormap import LinearColormap
import pickle
import numpy as np

st.set_page_config(layout="wide")

with open('village_agg_per_district_modified.pkl', 'rb') as f:
    district_gdfs = pickle.load(f)  # This is now a dictionary of GeoDataFrames keyed by district name

st.sidebar.title('Vulnerability Mapping for Uttar Pradesh')

districts = sorted(district_gdfs.keys())
selected_district = st.sidebar.selectbox('Select a district', districts)

# Filter GeoDataFrame based on selected district
district_gdf = district_gdfs[selected_district]

# Sidebar - Layer selection
layer_type = st.sidebar.radio('Select Layer', ['Subdistricts','Villages'])

if layer_type == 'Villages':
    filtered_gdf = district_gdf
    groupby_column = 'name'
else:
    # Group by subdistrict and dissolve
    filtered_gdf = district_gdf.dissolve(by='subdistrict', aggfunc={
        'tot_p': 'sum',
        'no_hh': 'sum',
        'avghhsz_cy': 'sum',
        'weighted_proba_case_count': 'sum',
        'normalized_risk_score':'sum',
        'district': 'first'
    }).reset_index()
    groupby_column = 'subdistrict'

# moving map to centroid of selected geometry
centroids = filtered_gdf.geometry.centroid
center_point = centroids.unary_union.centroid

# Check if normalized_risk_score exists and handle None values
if 'normalized_risk_score' in filtered_gdf.columns:
    # Replace None values with 0
    filtered_gdf['normalized_risk_score'].fillna(0, inplace=True)

# determine which score column to use based on normalised risk score checkbox
score_column = 'normalized_risk_score' if st.sidebar.checkbox('Normalize risk score by population?', value=True) else 'weighted_proba_case_count'

# Function to get color based on score
def get_color(score, colormap, is_top_5=False):
    if is_top_5:
        return '#FF0000'  # Bright red for top 5
    return colormap(score)

# Create the base map
m = folium.Map(location=[center_point.y, center_point.x], zoom_start=10)

# Add satellite and street map layers
folium.TileLayer(
    tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
    attr='Esri',
    name='Satellite',
    overlay=False,
    control=True
).add_to(m)

folium.TileLayer(
    tiles='OpenStreetMap',
    name='Street Map',
    overlay=False,
    control=True
).add_to(m)

if layer_type == 'Villages':
    # Identify top 5 villages
    top_5_villages = filtered_gdf.nlargest(5, score_column)
    top_5_names = set(top_5_villages[groupby_column])

    # Calculate min and max scores for remaining villages
    remaining_villages = filtered_gdf[~filtered_gdf[groupby_column].isin(top_5_names)]
    min_score = remaining_villages[score_column].min()
    max_score = remaining_villages[score_column].max()
else:
    min_score = filtered_gdf[score_column].min()
    max_score = filtered_gdf[score_column].max()

# Create colormap
colormap = LinearColormap(
    colors=['#40c040', '#a0e0a0', '#ffff00', '#ffd700', '#ffa500', '#ff4500', '#ff0000'],
    vmin=min_score,
    vmax=max_score
)

# Add GeoDataFrame to the map with GeoJson
folium.GeoJson(
    filtered_gdf,
    name=layer_type,
    style_function=lambda feature: {
        'fillColor': get_color(
            feature['properties'][score_column],
            colormap,
            layer_type == 'Villages' and feature['properties'][groupby_column] in top_5_names
        ),
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.7,
    },
    tooltip=folium.GeoJsonTooltip(
        fields=[groupby_column, 'district', 'tot_p', 'no_hh', 'avghhsz_cy', score_column],
        aliases=[f'{layer_type[:-1]}:', 'District:', 'Population:', 'Households:', 'Avg. Household Size:', 'Risk Score:'],
        localize=True,
        style=('background-color: white; color: #333333; font-family: arial; font-size: 12px; padding: 10px;')
    ),
).add_to(m)

# Add color legend
colormap.add_to(m)

# Add layer control
folium.LayerControl().add_to(m)

# Save the map to HTML string
map_html = m._repr_html_()

# Display the map using custom HTML
st.components.v1.html(f"""
    <div style="width: 100%; height: 100vh;">
        <h3>Map of {selected_district} - {layer_type} colored by Risk Score</h3>
        {map_html}
    </div>
""", height=700)

# Display statistics below the map
st.subheader(f'Statistics for {selected_district}')
st.write(f"Number of {layer_type.lower()}: {len(filtered_gdf)}")
st.write(f"Total population: {filtered_gdf['tot_p'].sum():.0f}")

# Display additional statistics only for Village view
if layer_type == 'Villages':
    st.write(f"Average household size: {filtered_gdf['avghhsz_cy'].mean():.2f}")
    st.write(f"Average risk score: {filtered_gdf[score_column].mean():.2f}")
    st.write(f"Min risk score: {min_score:.2f}")
    st.write(f"Max risk score: {max_score:.2f}")
    
    # Display top 5 villages
    st.subheader("Top 5 Villages by Risk Score")
    st.table(top_5_villages[[groupby_column, score_column]])